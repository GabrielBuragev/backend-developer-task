openapi: 3.0.3
info:
    title: null
    description: ''
    version: 1.0.0
servers:
    -
        url: 'http://localhost'
paths:
    /folder:
        get:
            summary: 'Display a listing of the folders for the authenticated user.'
            description: ''
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Basic {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: '200'
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    type: object
                                example:
                                    - { id: 1, name: 'My Folder 1', user_id: 1, created_at: '2021-05-17 14:15:15', updated_at: '2021-05-17 14:15:15', notes: [{ id: 1, name: 'My note 1', is_public: 0, noteable_type: text, created_at: '2021-05-17 14:15:15', updated_at: '2021-05-17 14:15:15', noteable: { id: 1, content: 'text work', created_at: '2021-05-17 14:15:15', updated_at: '2021-05-17 14:15:15' } }] }
                                    - { id: 2, name: 'My Folder 2', user_id: 1, created_at: '2021-05-17 14:15:15', updated_at: '2021-05-17 14:15:15', notes: [{ id: 2, name: 'My note 1', is_public: 1, noteable_type: list, created_at: '2021-05-17 14:15:15', updated_at: '2021-05-17 14:15:15', noteable: { id: 2, created_at: '2021-05-17 14:15:15', updated_at: '2021-05-17 14:15:15', items: [{ id: 4, content: 'Cool mine text something space food hobby wine', note_list_id: 2, created_at: '2021-05-17 14:15:15', updated_at: '2021-05-17 14:15:15' }, { id: 5, content: 'Cool note text work something hobby status folks', note_list_id: 2, created_at: '2021-05-17 14:15:15', updated_at: '2021-05-17 14:15:15' }, { id: 6, content: 'note mine something space junk food play status', note_list_id: 2, created_at: '2021-05-17 14:15:15', updated_at: '2021-05-17 14:15:15' }] } }] }
            tags:
                - 'User folder management'
        post:
            summary: 'Store a newly created folder in storage for the authenticated user.'
            description: ''
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Basic {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: '200'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    name: 'Folder 1'
                                    user_id: 2
                                    updated_at: '2021-05-17 12:58:28'
                                    created_at: '2021-05-17 12:58:28'
                                    id: 7
                                properties:
                                    name: { type: string, example: 'Folder 1' }
                                    user_id: { type: integer, example: 2 }
                                    updated_at: { type: string, example: '2021-05-17 12:58:28' }
                                    created_at: { type: string, example: '2021-05-17 12:58:28' }
                                    id: { type: integer, example: 7 }
            tags:
                - 'User folder management'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                name:
                                    type: string
                                    description: 'The name of the folder.'
                                    example: 'Folder 1'
                            required:
                                - name
    '/folder/{folder_id}':
        get:
            summary: 'Display the specified folder.'
            description: ''
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Basic {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: '200'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    id: 1
                                    name: 'My Folder 1'
                                    user_id: 1
                                    created_at: '2021-05-17 14:15:15'
                                    updated_at: '2021-05-17 14:15:15'
                                    notes: [{ id: 1, name: 'My note 1', is_public: 0, noteable_type: text, created_at: '2021-05-17 14:15:15', updated_at: '2021-05-17 14:15:15', noteable: { id: 1, content: 'text work', created_at: '2021-05-17 14:15:15', updated_at: '2021-05-17 14:15:15' } }, { id: 2, name: 'My note 2', is_public: 1, noteable_type: list, created_at: '2021-05-17 14:15:15', updated_at: '2021-05-17 14:15:15', noteable: { id: 1, created_at: '2021-05-17 14:15:15', updated_at: '2021-05-17 14:15:15', items: [{ id: 1, content: 'Cool note text work something space junk hobby play', note_list_id: 1, created_at: '2021-05-17 14:15:15', updated_at: '2021-05-17 14:15:15' }, { id: 2, content: 'note mine text work something space junk status folks', note_list_id: 1, created_at: '2021-05-17 14:15:15', updated_at: '2021-05-17 14:15:15' }, { id: 3, content: 'Cool note mine text something food wine status folks', note_list_id: 1, created_at: '2021-05-17 14:15:15', updated_at: '2021-05-17 14:15:15' }] } }]
                                properties:
                                    id: { type: integer, example: 1 }
                                    name: { type: string, example: 'My Folder 1' }
                                    user_id: { type: integer, example: 1 }
                                    created_at: { type: string, example: '2021-05-17 14:15:15' }
                                    updated_at: { type: string, example: '2021-05-17 14:15:15' }
                                    notes: { type: array, example: [{ id: 1, name: 'My note 1', is_public: 0, noteable_type: text, created_at: '2021-05-17 14:15:15', updated_at: '2021-05-17 14:15:15', noteable: { id: 1, content: 'text work', created_at: '2021-05-17 14:15:15', updated_at: '2021-05-17 14:15:15' } }, { id: 2, name: 'My note 2', is_public: 1, noteable_type: list, created_at: '2021-05-17 14:15:15', updated_at: '2021-05-17 14:15:15', noteable: { id: 1, created_at: '2021-05-17 14:15:15', updated_at: '2021-05-17 14:15:15', items: [{ id: 1, content: 'Cool note text work something space junk hobby play', note_list_id: 1, created_at: '2021-05-17 14:15:15', updated_at: '2021-05-17 14:15:15' }, { id: 2, content: 'note mine text work something space junk status folks', note_list_id: 1, created_at: '2021-05-17 14:15:15', updated_at: '2021-05-17 14:15:15' }, { id: 3, content: 'Cool note mine text something food wine status folks', note_list_id: 1, created_at: '2021-05-17 14:15:15', updated_at: '2021-05-17 14:15:15' }] } }], items: { type: object } }
            tags:
                - 'User folder management'
        put:
            summary: 'Update the specified folder in storage.'
            description: ''
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Basic {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: '200'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    id: 1
                                    name: 'Cool Folder Name'
                                    user_id: 2
                                    created_at: '2021-05-17 10:58:10'
                                    updated_at: '2021-05-17 12:59:15'
                                properties:
                                    id: { type: integer, example: 1 }
                                    name: { type: string, example: 'Cool Folder Name' }
                                    user_id: { type: integer, example: 2 }
                                    created_at: { type: string, example: '2021-05-17 10:58:10' }
                                    updated_at: { type: string, example: '2021-05-17 12:59:15' }
            tags:
                - 'User folder management'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                name:
                                    type: string
                                    description: 'The name of the folder.'
                                    example: 'Cool Folder Name'
                            required:
                                - name
        delete:
            summary: 'Remove the specified folder from storage.'
            description: ''
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Basic {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: '200'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    status: success
                                properties:
                                    status: { type: string, example: success }
            tags:
                - 'User folder management'
        parameters:
            -
                in: path
                name: folder_id
                description: 'The id of the folder.'
                example: '1'
                required: true
                schema:
                    type: string
    /notes:
        get:
            summary: 'Display a listing of the notes independent of authenticated user.'
            description: 'Its sole purpose is to demonstrate the "Filtering" > "By note folder" implementation'
            parameters:
                -
                    in: query
                    name: folder_id
                    description: 'Apply filter by folder id.'
                    example: '1'
                    required: false
                    schema:
                        type: string
                -
                    in: query
                    name: sort
                    description: 'Apply sorting using any of the following values: [''name_asc'', ''name_desc'', ''shared_first'', ''shared_last''].'
                    example: name_asc
                    required: false
                    schema:
                        type: string
                -
                    in: query
                    name: query
                    description: 'Apply filter by note text content.'
                    example: work
                    required: false
                    schema:
                        type: string
                -
                    in: query
                    name: shared
                    description: 'Apply filter by note visibility.'
                    example: '1'
                    required: false
                    schema:
                        type: string
                -
                    in: query
                    name: per_page
                    description: 'Apply pagination limitation for number of displayed elements on one page.'
                    example: '10'
                    required: false
                    schema:
                        type: string
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Basic {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    current_page: 1
                                    data: [{ id: 2, name: 'My note 2', is_public: 1, noteable_type: list, created_at: '2021-05-17 21:32:23', updated_at: '2021-05-17 21:32:23', noteable: { id: 1, created_at: '2021-05-17 21:32:23', updated_at: '2021-05-17 21:32:23', items: [{ id: 1, content: 'Cool note mine text space junk play wine status folks', note_list_id: 1, created_at: '2021-05-17 21:32:23', updated_at: '2021-05-17 21:32:23' }, { id: 2, content: 'Cool note mine text something junk food play wine status', note_list_id: 1, created_at: '2021-05-17 21:32:23', updated_at: '2021-05-17 21:32:23' }, { id: 3, content: 'Cool note mine work space food hobby play status folks', note_list_id: 1, created_at: '2021-05-17 21:32:23', updated_at: '2021-05-17 21:32:23' }] } }]
                                    first_page_url: 'http://localhost/notes?page=1'
                                    from: 1
                                    last_page: 1
                                    last_page_url: 'http://localhost/notes?page=1'
                                    next_page_url: null
                                    path: 'http://localhost/notes'
                                    per_page: '10'
                                    prev_page_url: null
                                    to: 1
                                    total: 1
                                properties:
                                    current_page: { type: integer, example: 1 }
                                    data: { type: array, example: [{ id: 2, name: 'My note 2', is_public: 1, noteable_type: list, created_at: '2021-05-17 21:32:23', updated_at: '2021-05-17 21:32:23', noteable: { id: 1, created_at: '2021-05-17 21:32:23', updated_at: '2021-05-17 21:32:23', items: [{ id: 1, content: 'Cool note mine text space junk play wine status folks', note_list_id: 1, created_at: '2021-05-17 21:32:23', updated_at: '2021-05-17 21:32:23' }, { id: 2, content: 'Cool note mine text something junk food play wine status', note_list_id: 1, created_at: '2021-05-17 21:32:23', updated_at: '2021-05-17 21:32:23' }, { id: 3, content: 'Cool note mine work space food hobby play status folks', note_list_id: 1, created_at: '2021-05-17 21:32:23', updated_at: '2021-05-17 21:32:23' }] } }], items: { type: object } }
                                    first_page_url: { type: string, example: 'http://localhost/notes?page=1' }
                                    from: { type: integer, example: 1 }
                                    last_page: { type: integer, example: 1 }
                                    last_page_url: { type: string, example: 'http://localhost/notes?page=1' }
                                    next_page_url: { type: 'null', example: null }
                                    path: { type: string, example: 'http://localhost/notes' }
                                    per_page: { type: string, example: '10' }
                                    prev_page_url: { type: 'null', example: null }
                                    to: { type: integer, example: 1 }
                                    total: { type: integer, example: 1 }
            tags:
                - 'User notes management'
    '/folder/{folder_id}/note':
        get:
            summary: 'Display a listing of the notes for authenticated user.'
            description: ''
            parameters:
                -
                    in: query
                    name: sort
                    description: 'Apply sorting using any of the following values: [''name_asc'', ''name_desc'', ''shared_first'', ''shared_last''].'
                    example: name_asc
                    required: false
                    schema:
                        type: string
                -
                    in: query
                    name: query
                    description: 'Apply filter by note text content.'
                    example: work
                    required: false
                    schema:
                        type: string
                -
                    in: query
                    name: shared
                    description: 'Apply filter by note visibility.'
                    example: '1'
                    required: false
                    schema:
                        type: string
                -
                    in: query
                    name: per_page
                    description: 'Apply pagination limitation for number of displayed elements on one page.'
                    example: '10'
                    required: false
                    schema:
                        type: string
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Basic {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    current_page: 1
                                    data: [{ id: 2, name: 'My note 2', is_public: 1, noteable_type: list, created_at: '2021-05-17 21:32:23', updated_at: '2021-05-17 21:32:23', laravel_through_key: 1, noteable: { id: 1, created_at: '2021-05-17 21:32:23', updated_at: '2021-05-17 21:32:23', items: [{ id: 1, content: 'Cool note mine text space junk play wine status folks', note_list_id: 1, created_at: '2021-05-17 21:32:23', updated_at: '2021-05-17 21:32:23' }, { id: 2, content: 'Cool note mine text something junk food play wine status', note_list_id: 1, created_at: '2021-05-17 21:32:23', updated_at: '2021-05-17 21:32:23' }, { id: 3, content: 'Cool note mine work space food hobby play status folks', note_list_id: 1, created_at: '2021-05-17 21:32:23', updated_at: '2021-05-17 21:32:23' }] } }]
                                    first_page_url: 'http://localhost/folder/1/note?page=1'
                                    from: 1
                                    last_page: 1
                                    last_page_url: 'http://localhost/folder/1/note?page=1'
                                    next_page_url: null
                                    path: 'http://localhost/folder/1/note'
                                    per_page: '10'
                                    prev_page_url: null
                                    to: 1
                                    total: 1
                                properties:
                                    current_page: { type: integer, example: 1 }
                                    data: { type: array, example: [{ id: 2, name: 'My note 2', is_public: 1, noteable_type: list, created_at: '2021-05-17 21:32:23', updated_at: '2021-05-17 21:32:23', laravel_through_key: 1, noteable: { id: 1, created_at: '2021-05-17 21:32:23', updated_at: '2021-05-17 21:32:23', items: [{ id: 1, content: 'Cool note mine text space junk play wine status folks', note_list_id: 1, created_at: '2021-05-17 21:32:23', updated_at: '2021-05-17 21:32:23' }, { id: 2, content: 'Cool note mine text something junk food play wine status', note_list_id: 1, created_at: '2021-05-17 21:32:23', updated_at: '2021-05-17 21:32:23' }, { id: 3, content: 'Cool note mine work space food hobby play status folks', note_list_id: 1, created_at: '2021-05-17 21:32:23', updated_at: '2021-05-17 21:32:23' }] } }], items: { type: object } }
                                    first_page_url: { type: string, example: 'http://localhost/folder/1/note?page=1' }
                                    from: { type: integer, example: 1 }
                                    last_page: { type: integer, example: 1 }
                                    last_page_url: { type: string, example: 'http://localhost/folder/1/note?page=1' }
                                    next_page_url: { type: 'null', example: null }
                                    path: { type: string, example: 'http://localhost/folder/1/note' }
                                    per_page: { type: string, example: '10' }
                                    prev_page_url: { type: 'null', example: null }
                                    to: { type: integer, example: 1 }
                                    total: { type: integer, example: 1 }
            tags:
                - 'User notes management'
        post:
            summary: 'Store a newly created note in storage.'
            description: ''
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Basic {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - 'User notes management'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                name:
                                    type: string
                                    description: 'The name of the note.'
                                    example: 'My note name'
                                is_public:
                                    type: integer
                                    description: 'The visibility status of the note, <b>default: false</b>.'
                                    example: 1
                                noteable_type:
                                    type: string
                                    description: 'The value must be one of <code>text</code> or <code>list</code>.'
                                    example: text
                                noteable:
                                    type: object
                                    description: 'Object which holds note content data'
                                    example: []
                            required:
                                - name
                                - noteable_type
                                - noteable
        parameters:
            -
                in: path
                name: folder_id
                description: 'The id of the folder.'
                example: '1'
                required: true
                schema:
                    type: string
    '/folder/{folder_id}/note/{note_id}':
        get:
            summary: 'Display the specified note.'
            description: ''
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Basic {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    id: 1
                                    name: 'My note 1'
                                    is_public: 0
                                    noteable_type: text
                                    created_at: '2021-05-17 21:32:23'
                                    updated_at: '2021-05-17 21:32:23'
                                    noteable: { id: 1, content: space, created_at: '2021-05-17 21:32:23', updated_at: '2021-05-17 21:32:23' }
                                properties:
                                    id: { type: integer, example: 1 }
                                    name: { type: string, example: 'My note 1' }
                                    is_public: { type: integer, example: 0 }
                                    noteable_type: { type: string, example: text }
                                    created_at: { type: string, example: '2021-05-17 21:32:23' }
                                    updated_at: { type: string, example: '2021-05-17 21:32:23' }
                                    noteable: { type: object, example: { id: 1, content: space, created_at: '2021-05-17 21:32:23', updated_at: '2021-05-17 21:32:23' } }
            tags:
                - 'User notes management'
        put:
            summary: 'Update the specified note in storage.'
            description: ''
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Basic {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - 'User notes management'
            requestBody:
                required: false
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                name:
                                    type: string
                                    description: 'The name of the note.'
                                    example: ullam
                                is_public:
                                    type: integer
                                    description: 'The visibility status of the note.'
                                    example: 1
        delete:
            summary: 'Remove the specified note from storage.'
            description: ''
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Basic {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - 'User notes management'
        parameters:
            -
                in: path
                name: folder_id
                description: 'The id of the folder.'
                example: '1'
                required: true
                schema:
                    type: string
            -
                in: path
                name: note_id
                description: 'The id of the note.'
                example: '1'
                required: true
                schema:
                    type: string
components:
    securitySchemes:
        default:
            type: http
            scheme: basic
            description: ''
security:
    -
        default: []
